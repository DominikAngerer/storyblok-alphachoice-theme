(global => {
  'use strict';

  // Load the sw-tookbox library.
  importScripts('https://a.storyblok.com/t/40823/assets/js/sw-toolbox.js');

  // The route for any requests from the storyblok origin
  toolbox.router.get('/(.*)', global.toolbox.cacheFirst, {
    cache: {
      name: 'storyblok-assets',
      maxEntries: 30,
      maxAgeSeconds: 86400 // cache for a day
    },
    origin: /a\.storyblok\.com$/,
    // Set a timeout threshold of 2 seconds
    networkTimeoutSeconds: 2
  });

  // // The route for any requests from the googleapis origin
  // toolbox.router.get('/(.*)', global.toolbox.cacheFirst, {
  //   cache: {
  //     name: 'googleapis',
  //     maxEntries: 10,
  //     maxAgeSeconds: 86400 // cache for a day
  //   },
  //   origin: /\.googleapis\.com$/,
  //   // Set a timeout threshold of 2 seconds
  //   networkTimeoutSeconds: 2
  // });

  toolbox.router.get('/(.*)', global.toolbox.fastest, {
    origin: /https:\/\/fonts.(googleapis|gstatic).com/,
    cache: {
        name: 'google-fonts',
        maxEntries: 10,
    },
    networkTimeoutSeconds: 2
  });


  // // Cache all static vendor assets, e.g. fonts whose version is bind to the according URI
  // toolbox.router.get('/(.*)', global.toolbox.fastest, {  
  //     origin: /fonts\.gstatic\.com/,
  //     cache: {
  //       name: 'gstatic',
  //       maxEntries: 5
  //     }
  //   }
  // );

  toolbox.router.get('/(.*)/products/*', toolbox.networkFirst);

  // By default, all requests that don't match our custom handler will use the toolbox.networkFirst
  // cache strategy, and their responses will be stored in the default cache.
  global.toolbox.router.default = global.toolbox.networkFirst;

  // Boilerplate to ensure our service worker takes control of the page as soon as possible.
  global.addEventListener('install', event => event.waitUntil(global.skipWaiting()));
  global.addEventListener('activate', event => event.waitUntil(global.clients.claim()));
})(self);